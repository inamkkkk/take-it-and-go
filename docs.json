{
  "docs": [
    {
      "summary": "This file is the package.json manifest for the takeitgo-lite-backend project. It defines project metadata, scripts for development and production, and lists its dependencies and devDependencies."
    },
    {
      "summary": "Environment variables configuration file example. These variables are used to configure the application's settings such as port, database connection, and authentication secrets. Uncomment and set the GOOGLE_MAPS_API_KEY for optional Google Maps integration."
    },
    {
      "summary": "This file is a .gitignore file. It specifies intentionally untracked files that Git should ignore. This is a standard configuration file for Git and does not represent a route, model, utility, or config that can be documented within the OpenAPI specification."
    },
    {
      "summary": "This file is the main entry point of the backend application. It sets up the HTTP server, initializes Socket.IO, connects to the database, and handles graceful shutdown and error handling."
    },
    {
      "summary": "Main application file for setting up the Express server, middleware, and routes. It configures logging, CORS, request body parsing, and error handling. It also mounts the main API routes and handles 404 errors for unhandled routes."
    },
    {
      "summary": "Utility function to establish a connection to a MongoDB database using Mongoose. It logs connection success or failure and exits the process if connection fails."
    },
    {
      "summary": "Configuration settings for the application, including environment variables related to Node.js environment, port, database connection, JWT settings, and optional Google Maps API key. This file defines and validates these configuration values."
    },
    {
      "components": {
        "schemas": {
          "User": {
            "type": "object",
            "properties": {
              "_id": {
                "type": "string",
                "description": "Unique identifier for the user (generated by MongoDB)",
                "readOnly": true
              },
              "email": {
                "type": "string",
                "format": "email",
                "description": "User's email address",
                "example": "test@example.com"
              },
              "phone": {
                "type": "string",
                "description": "User's phone number, including country code",
                "example": "+11234567890"
              },
              "password": {
                "type": "string",
                "minLength": 8,
                "description": "User's password (minimum 8 characters)",
                "writeOnly": true
              },
              "role": {
                "type": "string",
                "enum": [
                  "shipper",
                  "traveler"
                ],
                "default": "shipper",
                "description": "Role of the user in the system"
              },
              "createdAt": {
                "type": "string",
                "format": "date-time",
                "description": "Timestamp when the user was created",
                "readOnly": true
              }
            },
            "required": [
              "email",
              "phone",
              "password"
            ]
          }
        }
      }
    },
    {
      "components": {
        "schemas": {
          "Payment": {
            "type": "object",
            "properties": {
              "_id": {
                "type": "string",
                "description": "Unique identifier for the payment.",
                "readOnly": true
              },
              "deliveryId": {
                "type": "string",
                "format": "ObjectId",
                "description": "Reference to the associated Delivery."
              },
              "amount": {
                "type": "number",
                "description": "The amount of the payment.",
                "minimum": 0
              },
              "status": {
                "type": "string",
                "description": "The current status of the payment.",
                "enum": [
                  "pending",
                  "completed",
                  "failed",
                  "refunded"
                ],
                "default": "pending"
              },
              "transactionRef": {
                "type": "string",
                "description": "External payment gateway transaction ID.",
                "nullable": true
              },
              "createdAt": {
                "type": "string",
                "format": "date-time",
                "description": "Timestamp when the payment was created.",
                "readOnly": true
              },
              "updatedAt": {
                "type": "string",
                "format": "date-time",
                "description": "Timestamp when the payment was last updated.",
                "readOnly": true
              }
            },
            "required": [
              "deliveryId",
              "amount"
            ]
          }
        }
      }
    },
    {
      "components": {
        "schemas": {
          "Delivery": {
            "type": "object",
            "properties": {
              "shipperId": {
                "type": "string",
                "description": "ID of the shipper making the delivery request.",
                "example": "60f1b2b4b3e3e3e3e3e3e3e3"
              },
              "travelerId": {
                "type": "string",
                "nullable": true,
                "description": "ID of the traveler assigned to this delivery.",
                "example": "60f1b2b4b3e3e3e3e3e3e3e4"
              },
              "pickup": {
                "type": "object",
                "properties": {
                  "address": {
                    "type": "string",
                    "description": "Full address for pickup.",
                    "example": "123 Main St, Anytown, USA"
                  },
                  "coordinates": {
                    "type": "array",
                    "items": {
                      "type": "number"
                    },
                    "description": "Pickup coordinates in [longitude, latitude] format.",
                    "example": [
                      -74.006,
                      40.7128
                    ]
                  }
                },
                "required": [
                  "address"
                ]
              },
              "drop": {
                "type": "object",
                "properties": {
                  "address": {
                    "type": "string",
                    "description": "Full address for drop-off.",
                    "example": "456 Oak Ave, Otherville, USA"
                  },
                  "coordinates": {
                    "type": "array",
                    "items": {
                      "type": "number"
                    },
                    "description": "Drop-off coordinates in [longitude, latitude] format.",
                    "example": [
                      -73.9352,
                      40.8371
                    ]
                  }
                },
                "required": [
                  "address"
                ]
              },
              "itemDescription": {
                "type": "string",
                "description": "Detailed description of the item to be delivered.",
                "example": "A delicate antique vase"
              },
              "itemWeight": {
                "type": "number",
                "format": "float",
                "description": "Weight of the item in kilograms.",
                "default": 0,
                "example": 2.5
              },
              "itemDimensions": {
                "type": "object",
                "properties": {
                  "width": {
                    "type": "number",
                    "format": "float",
                    "description": "Width of the item in centimeters.",
                    "example": 30
                  },
                  "height": {
                    "type": "number",
                    "format": "float",
                    "description": "Height of the item in centimeters.",
                    "example": 40
                  },
                  "depth": {
                    "type": "number",
                    "format": "float",
                    "description": "Depth of the item in centimeters.",
                    "example": 20
                  }
                },
                "description": "Dimensions of the item in centimeters."
              },
              "price": {
                "type": "number",
                "format": "float",
                "description": "The price for the delivery service.",
                "example": 50.75
              },
              "status": {
                "type": "string",
                "enum": [
                  "pending",
                  "matched",
                  "in-transit",
                  "delivered",
                  "cancelled",
                  "completed"
                ],
                "description": "Current status of the delivery.",
                "default": "pending"
              },
              "requestedPickupTime": {
                "type": "string",
                "format": "date-time",
                "description": "The preferred time for pickup.",
                "example": "2023-10-27T10:00:00Z"
              },
              "expectedDeliveryTime": {
                "type": "string",
                "format": "date-time",
                "description": "The estimated time of delivery.",
                "example": "2023-10-27T14:00:00Z"
              },
              "actualDeliveryTime": {
                "type": "string",
                "format": "date-time",
                "nullable": true,
                "description": "The actual time the delivery was completed.",
                "example": "2023-10-27T13:45:00Z"
              },
              "createdAt": {
                "type": "string",
                "format": "date-time",
                "description": "Timestamp when the delivery record was created.",
                "readOnly": true,
                "example": "2023-10-26T09:00:00Z"
              },
              "updatedAt": {
                "type": "string",
                "format": "date-time",
                "description": "Timestamp when the delivery record was last updated.",
                "readOnly": true,
                "example": "2023-10-26T11:30:00Z"
              }
            },
            "required": [
              "shipperId",
              "pickup",
              "drop",
              "itemDescription",
              "price"
            ]
          }
        }
      }
    },
    {
      "components": {
        "schemas": {
          "Chat": {
            "type": "object",
            "properties": {
              "_id": {
                "type": "string",
                "description": "Unique identifier for the chat message.",
                "readOnly": true
              },
              "senderId": {
                "type": "string",
                "description": "ID of the user who sent the message.",
                "example": "60d5ec49f3b5a3b1f8a2b1c3"
              },
              "receiverId": {
                "type": "string",
                "description": "ID of the user who received the message.",
                "example": "60d5ec49f3b5a3b1f8a2b1c4"
              },
              "deliveryId": {
                "type": "string",
                "description": "Optional ID of the delivery associated with the chat message.",
                "example": "60d5ec49f3b5a3b1f8a2b1c5"
              },
              "message": {
                "type": "string",
                "description": "The content of the chat message.",
                "example": "Hello, where is my delivery?"
              },
              "timestamp": {
                "type": "string",
                "format": "date-time",
                "description": "The timestamp when the message was sent.",
                "readOnly": true
              },
              "readBy": {
                "type": "array",
                "items": {
                  "type": "string",
                  "description": "ID of the user who has read the message."
                },
                "description": "List of user IDs who have read the message."
              },
              "createdAt": {
                "type": "string",
                "format": "date-time",
                "description": "Timestamp of when the chat record was created.",
                "readOnly": true
              },
              "updatedAt": {
                "type": "string",
                "format": "date-time",
                "description": "Timestamp of when the chat record was last updated.",
                "readOnly": true
              }
            },
            "required": [
              "senderId",
              "receiverId",
              "message"
            ]
          }
        }
      }
    },
    {
      "components": {
        "schemas": {
          "GPSLog": {
            "type": "object",
            "properties": {
              "deliveryId": {
                "type": "string",
                "description": "The ID of the delivery associated with this GPS log.",
                "format": "objectId",
                "example": "60a7c3e2a7c3e2a7c3e2a7c3"
              },
              "userId": {
                "type": "string",
                "description": "The ID of the user whose location is being tracked (e.g., traveler).",
                "format": "objectId",
                "example": "60a7c3e2a7c3e2a7c3e2a7c3"
              },
              "latitude": {
                "type": "number",
                "description": "The latitude coordinate of the GPS log.",
                "example": 34.0522
              },
              "longitude": {
                "type": "number",
                "description": "The longitude coordinate of the GPS log.",
                "example": -118.2437
              },
              "timestamp": {
                "type": "string",
                "format": "date-time",
                "description": "The timestamp when the GPS log was recorded.",
                "default": "now"
              },
              "createdAt": {
                "type": "string",
                "format": "date-time",
                "description": "The timestamp when the GPS log was created (auto-generated)."
              },
              "updatedAt": {
                "type": "string",
                "format": "date-time",
                "description": "The timestamp when the GPS log was last updated (auto-generated)."
              }
            },
            "required": [
              "deliveryId",
              "userId",
              "latitude",
              "longitude"
            ]
          }
        }
      }
    },
    {
      "summary": "Authentication service for user management, including signup, login, and password reset functionalities."
    },
    {
      "summary": "Service for managing delivery matching logic."
    },
    {
      "paths": {
        "/deliveries/{deliveryId}/track/start": {
          "post": {
            "summary": "Start tracking for a delivery.",
            "tags": [
              "Tracking"
            ],
            "parameters": [
              {
                "name": "deliveryId",
                "in": "path",
                "required": true,
                "schema": {
                  "type": "string"
                },
                "description": "The ID of the delivery to start tracking."
              }
            ],
            "requestBody": {
              "required": true,
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "travelerId": {
                        "type": "string",
                        "description": "The ID of the traveler initiating the tracking."
                      }
                    },
                    "required": [
                      "travelerId"
                    ]
                  }
                }
              }
            },
            "responses": {
              "200": {
                "description": "Delivery status updated to 'in-transit'.",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/Delivery"
                    }
                  }
                }
              },
              "400": {
                "description": "Bad Request.",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/AppError"
                    }
                  }
                }
              },
              "403": {
                "description": "Forbidden - User not authorized to track this delivery.",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/AppError"
                    }
                  }
                }
              },
              "404": {
                "description": "Delivery not found.",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/AppError"
                    }
                  }
                }
              }
            }
          }
        },
        "/deliveries/{deliveryId}/track/stop": {
          "post": {
            "summary": "Stop tracking for a delivery.",
            "tags": [
              "Tracking"
            ],
            "parameters": [
              {
                "name": "deliveryId",
                "in": "path",
                "required": true,
                "schema": {
                  "type": "string"
                },
                "description": "The ID of the delivery to stop tracking."
              }
            ],
            "requestBody": {
              "required": true,
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "travelerId": {
                        "type": "string",
                        "description": "The ID of the traveler completing the delivery."
                      }
                    },
                    "required": [
                      "travelerId"
                    ]
                  }
                }
              }
            },
            "responses": {
              "200": {
                "description": "Delivery status updated to 'delivered'.",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/Delivery"
                    }
                  }
                }
              },
              "403": {
                "description": "Forbidden - User not authorized to stop tracking for this delivery.",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/AppError"
                    }
                  }
                }
              },
              "404": {
                "description": "Delivery not found.",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/AppError"
                    }
                  }
                }
              }
            }
          }
        },
        "/deliveries/{deliveryId}/track/log-gps": {
          "post": {
            "summary": "Log a GPS coordinate for a delivery.",
            "tags": [
              "Tracking"
            ],
            "parameters": [
              {
                "name": "deliveryId",
                "in": "path",
                "required": true,
                "schema": {
                  "type": "string"
                },
                "description": "The ID of the delivery for which to log GPS coordinates."
              }
            ],
            "requestBody": {
              "required": true,
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "userId": {
                        "type": "string",
                        "description": "The ID of the user (e.g., traveler) logging the GPS coordinate."
                      },
                      "latitude": {
                        "type": "number",
                        "description": "The latitude coordinate."
                      },
                      "longitude": {
                        "type": "number",
                        "description": "The longitude coordinate."
                      }
                    },
                    "required": [
                      "userId",
                      "latitude",
                      "longitude"
                    ]
                  }
                }
              }
            },
            "responses": {
              "201": {
                "description": "GPS coordinate logged successfully.",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/GPSLog"
                    }
                  }
                }
              },
              "400": {
                "description": "Bad Request (e.g., delivery not in transit).",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/AppError"
                    }
                  }
                }
              },
              "403": {
                "description": "Forbidden - Only the assigned traveler can log GPS.",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/AppError"
                    }
                  }
                }
              },
              "404": {
                "description": "Delivery not found.",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/AppError"
                    }
                  }
                }
              }
            }
          }
        },
        "/deliveries/{deliveryId}/track/logs": {
          "get": {
            "summary": "Get all tracking logs for a specific delivery.",
            "tags": [
              "Tracking"
            ],
            "parameters": [
              {
                "name": "deliveryId",
                "in": "path",
                "required": true,
                "schema": {
                  "type": "string"
                },
                "description": "The ID of the delivery for which to retrieve tracking logs."
              }
            ],
            "responses": {
              "200": {
                "description": "An array of GPS log entries for the delivery.",
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/GPSLog"
                      }
                    }
                  }
                }
              },
              "404": {
                "description": "Delivery not found.",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/AppError"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "components": {
        "schemas": {
          "GPSLog": {
            "type": "object",
            "properties": {
              "_id": {
                "type": "string",
                "description": "Unique identifier for the GPS log entry."
              },
              "deliveryId": {
                "type": "string",
                "description": "The ID of the delivery this log belongs to."
              },
              "userId": {
                "type": "string",
                "description": "The ID of the user who logged the GPS coordinate."
              },
              "latitude": {
                "type": "number",
                "description": "The latitude coordinate."
              },
              "longitude": {
                "type": "number",
                "description": "The longitude coordinate."
              },
              "timestamp": {
                "type": "string",
                "format": "date-time",
                "description": "The timestamp when the GPS coordinate was logged."
              }
            },
            "required": [
              "deliveryId",
              "userId",
              "latitude",
              "longitude",
              "timestamp"
            ]
          },
          "Delivery": {
            "type": "object",
            "properties": {
              "_id": {
                "type": "string",
                "description": "Unique identifier for the delivery."
              },
              "pickupLocation": {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "Point"
                    ],
                    "default": "Point"
                  },
                  "coordinates": {
                    "type": "array",
                    "items": {
                      "type": "number"
                    },
                    "description": "Longitude and Latitude."
                  }
                },
                "required": [
                  "type",
                  "coordinates"
                ]
              },
              "dropoffLocation": {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "Point"
                    ],
                    "default": "Point"
                  },
                  "coordinates": {
                    "type": "array",
                    "items": {
                      "type": "number"
                    },
                    "description": "Longitude and Latitude."
                  }
                },
                "required": [
                  "type",
                  "coordinates"
                ]
              },
              "recipientName": {
                "type": "string"
              },
              "recipientPhone": {
                "type": "string"
              },
              "description": {
                "type": "string"
              },
              "status": {
                "type": "string",
                "enum": [
                  "pending",
                  "assigned",
                  "in-transit",
                  "delivered",
                  "cancelled"
                ],
                "default": "pending"
              },
              "travelerId": {
                "type": "string",
                "nullable": true,
                "description": "The ID of the traveler assigned to this delivery."
              },
              "shipperId": {
                "type": "string"
              },
              "createdAt": {
                "type": "string",
                "format": "date-time"
              },
              "updatedAt": {
                "type": "string",
                "format": "date-time"
              },
              "actualDeliveryTime": {
                "type": "string",
                "format": "date-time",
                "nullable": true
              }
            },
            "required": [
              "pickupLocation",
              "dropoffLocation",
              "recipientName",
              "recipientPhone",
              "description",
              "status",
              "shipperId",
              "createdAt",
              "updatedAt"
            ]
          },
          "AppError": {
            "type": "object",
            "properties": {
              "message": {
                "type": "string",
                "description": "A human-readable error message."
              },
              "statusCode": {
                "type": "integer",
                "description": "The HTTP status code associated with the error."
              }
            },
            "required": [
              "message",
              "statusCode"
            ]
          }
        }
      }
    },
    {
      "summary": "Payment Service - Handles creation and release of escrow payments for deliveries."
    },
    {
      "summary": "User service functions for fetching and updating user data."
    },
    {
      "paths": {
        "/auth/signup": {
          "post": {
            "summary": "User signup",
            "tags": [
              "Auth"
            ],
            "requestBody": {
              "required": true,
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/SignupRequest"
                  }
                }
              }
            },
            "responses": {
              "201": {
                "description": "User created successfully",
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "object",
                      "properties": {
                        "user": {
                          "$ref": "#/components/schemas/User"
                        },
                        "token": {
                          "type": "string",
                          "description": "JWT token for authentication"
                        }
                      }
                    }
                  }
                }
              },
              "400": {
                "description": "Bad Request - Invalid input"
              }
            }
          }
        },
        "/auth/login": {
          "post": {
            "summary": "User login",
            "tags": [
              "Auth"
            ],
            "requestBody": {
              "required": true,
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/LoginRequest"
                  }
                }
              }
            },
            "responses": {
              "200": {
                "description": "User logged in successfully",
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "object",
                      "properties": {
                        "user": {
                          "$ref": "#/components/schemas/User"
                        },
                        "token": {
                          "type": "string",
                          "description": "JWT token for authentication"
                        }
                      }
                    }
                  }
                }
              },
              "400": {
                "description": "Bad Request - Invalid input or credentials"
              }
            }
          }
        },
        "/auth/reset-password": {
          "post": {
            "summary": "Reset user password",
            "tags": [
              "Auth"
            ],
            "description": "Note: In a real application, 'newPassword' would not be sent directly. A secure token-based flow would be used. This endpoint is for demonstration purposes.",
            "requestBody": {
              "required": true,
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ResetPasswordRequest"
                  }
                }
              }
            },
            "responses": {
              "200": {
                "description": "Password reset successful",
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "object",
                      "properties": {
                        "message": {
                          "type": "string",
                          "example": "Password reset successfully"
                        }
                      }
                    }
                  }
                }
              },
              "400": {
                "description": "Bad Request - Invalid input"
              }
            }
          }
        }
      },
      "components": {
        "schemas": {
          "SignupRequest": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "User's full name"
              },
              "email": {
                "type": "string",
                "format": "email",
                "description": "User's email address"
              },
              "password": {
                "type": "string",
                "format": "password",
                "description": "User's password"
              }
            },
            "required": [
              "name",
              "email",
              "password"
            ]
          },
          "LoginRequest": {
            "type": "object",
            "properties": {
              "email": {
                "type": "string",
                "format": "email",
                "description": "User's email address"
              },
              "password": {
                "type": "string",
                "format": "password",
                "description": "User's password"
              }
            },
            "required": [
              "email",
              "password"
            ]
          },
          "ResetPasswordRequest": {
            "type": "object",
            "properties": {
              "email": {
                "type": "string",
                "format": "email",
                "description": "User's email address"
              },
              "newPassword": {
                "type": "string",
                "format": "password",
                "description": "The new password for the user"
              }
            },
            "required": [
              "email",
              "newPassword"
            ]
          },
          "User": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the user"
              },
              "name": {
                "type": "string",
                "description": "User's full name"
              },
              "email": {
                "type": "string",
                "format": "email",
                "description": "User's email address"
              },
              "createdAt": {
                "type": "string",
                "format": "date-time",
                "description": "Timestamp when the user was created"
              },
              "updatedAt": {
                "type": "string",
                "format": "date-time",
                "description": "Timestamp when the user was last updated"
              }
            }
          }
        }
      }
    },
    {
      "paths": {
        "/matches": {
          "post": {
            "summary": "Find matches for a delivery",
            "tags": [
              "Match"
            ],
            "requestBody": {
              "required": true,
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "deliveryId": {
                        "type": "string",
                        "description": "The ID of the delivery for which to find matches."
                      }
                    },
                    "required": [
                      "deliveryId"
                    ]
                  }
                }
              }
            },
            "responses": {
              "200": {
                "description": "Successfully found matches.",
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Match"
                      }
                    }
                  }
                }
              },
              "400": {
                "description": "Bad Request - Invalid input."
              },
              "401": {
                "description": "Unauthorized - User not authenticated."
              },
              "404": {
                "description": "Not Found - Delivery or related resources not found."
              },
              "500": {
                "description": "Internal Server Error."
              }
            }
          }
        }
      },
      "components": {
        "schemas": {
          "Match": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "Unique identifier for the match."
              },
              "shipperId": {
                "type": "string",
                "description": "ID of the shipper involved in the match."
              },
              "deliveryId": {
                "type": "string",
                "description": "ID of the delivery associated with the match."
              },
              "carrierId": {
                "type": "string",
                "description": "ID of the carrier involved in the match."
              },
              "status": {
                "type": "string",
                "enum": [
                  "pending",
                  "accepted",
                  "rejected",
                  "completed"
                ],
                "description": "Current status of the match."
              },
              "createdAt": {
                "type": "string",
                "format": "date-time",
                "description": "Timestamp when the match was created."
              },
              "updatedAt": {
                "type": "string",
                "format": "date-time",
                "description": "Timestamp when the match was last updated."
              }
            },
            "required": [
              "id",
              "shipperId",
              "deliveryId",
              "carrierId",
              "status"
            ]
          }
        }
      }
    },
    {
      "paths": {
        "/payments/escrow": {
          "post": {
            "summary": "Create an escrow payment for a delivery.",
            "tags": [
              "Payments"
            ],
            "requestBody": {
              "required": true,
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "deliveryId": {
                        "type": "string",
                        "description": "The ID of the delivery for which the escrow is being created.",
                        "example": "delivery_abc123"
                      },
                      "amount": {
                        "type": "number",
                        "format": "float",
                        "description": "The amount to be held in escrow.",
                        "example": 100.5
                      }
                    },
                    "required": [
                      "deliveryId",
                      "amount"
                    ]
                  }
                }
              }
            },
            "responses": {
              "201": {
                "description": "Escrow payment created successfully.",
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "Unique identifier for the payment.",
                          "example": "payment_xyz789"
                        },
                        "deliveryId": {
                          "type": "string",
                          "description": "The ID of the delivery associated with this payment.",
                          "example": "delivery_abc123"
                        },
                        "amount": {
                          "type": "number",
                          "format": "float",
                          "description": "The amount held in escrow.",
                          "example": 100.5
                        },
                        "status": {
                          "type": "string",
                          "description": "Current status of the payment.",
                          "example": "pending_escrow"
                        },
                        "createdAt": {
                          "type": "string",
                          "format": "date-time",
                          "description": "Timestamp when the payment was created.",
                          "example": "2023-10-27T10:00:00Z"
                        }
                      }
                    }
                  }
                }
              },
              "400": {
                "description": "Bad request. Missing or invalid input.",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/ApiError"
                    }
                  }
                }
              },
              "500": {
                "description": "Internal server error.",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/ApiError"
                    }
                  }
                }
              }
            }
          }
        },
        "/payments/release": {
          "post": {
            "summary": "Release funds from an escrow payment.",
            "tags": [
              "Payments"
            ],
            "requestBody": {
              "required": true,
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "paymentId": {
                        "type": "string",
                        "description": "The ID of the payment to release funds from.",
                        "example": "payment_xyz789"
                      }
                    },
                    "required": [
                      "paymentId"
                    ]
                  }
                }
              }
            },
            "responses": {
              "200": {
                "description": "Funds released successfully.",
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "Unique identifier for the payment.",
                          "example": "payment_xyz789"
                        },
                        "deliveryId": {
                          "type": "string",
                          "description": "The ID of the delivery associated with this payment.",
                          "example": "delivery_abc123"
                        },
                        "amount": {
                          "type": "number",
                          "format": "float",
                          "description": "The amount that was held in escrow.",
                          "example": 100.5
                        },
                        "status": {
                          "type": "string",
                          "description": "Current status of the payment.",
                          "example": "completed"
                        },
                        "createdAt": {
                          "type": "string",
                          "format": "date-time",
                          "description": "Timestamp when the payment was created.",
                          "example": "2023-10-27T10:00:00Z"
                        },
                        "releasedAt": {
                          "type": "string",
                          "format": "date-time",
                          "description": "Timestamp when the funds were released.",
                          "example": "2023-10-27T11:00:00Z"
                        }
                      }
                    }
                  }
                }
              },
              "400": {
                "description": "Bad request. Missing or invalid payment ID.",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/ApiError"
                    }
                  }
                }
              },
              "404": {
                "description": "Payment not found.",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/ApiError"
                    }
                  }
                }
              },
              "500": {
                "description": "Internal server error.",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/ApiError"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "components": {
        "schemas": {
          "ApiError": {
            "type": "object",
            "properties": {
              "statusCode": {
                "type": "integer",
                "description": "HTTP status code of the error.",
                "example": 400
              },
              "message": {
                "type": "string",
                "description": "A human-readable message describing the error.",
                "example": "Delivery ID is required"
              },
              "isOperational": {
                "type": "boolean",
                "description": "Indicates if the error is operational (e.g., invalid input, not a bug).",
                "example": true
              }
            },
            "required": [
              "statusCode",
              "message"
            ]
          }
        }
      }
    },
    {
      "paths": {
        "/tracking/start": {
          "post": {
            "summary": "Start tracking a delivery.",
            "tags": [
              "Tracking"
            ],
            "requestBody": {
              "required": true,
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "deliveryId": {
                        "type": "string",
                        "description": "The ID of the delivery to start tracking."
                      }
                    },
                    "required": [
                      "deliveryId"
                    ]
                  }
                }
              }
            },
            "responses": {
              "200": {
                "description": "Delivery tracking started successfully.",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/Delivery"
                    }
                  }
                }
              },
              "400": {
                "description": "Bad Request - Delivery ID is required or invalid."
              },
              "500": {
                "description": "Internal Server Error"
              }
            }
          }
        },
        "/tracking/stop": {
          "post": {
            "summary": "Stop tracking a delivery.",
            "tags": [
              "Tracking"
            ],
            "requestBody": {
              "required": true,
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "deliveryId": {
                        "type": "string",
                        "description": "The ID of the delivery to stop tracking."
                      }
                    },
                    "required": [
                      "deliveryId"
                    ]
                  }
                }
              }
            },
            "responses": {
              "200": {
                "description": "Delivery tracking stopped successfully.",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/Delivery"
                    }
                  }
                }
              },
              "400": {
                "description": "Bad Request - Delivery ID is required or invalid."
              },
              "500": {
                "description": "Internal Server Error"
              }
            }
          }
        },
        "/tracking/{deliveryId}": {
          "get": {
            "summary": "Get tracking logs for a delivery.",
            "tags": [
              "Tracking"
            ],
            "parameters": [
              {
                "name": "deliveryId",
                "in": "path",
                "required": true,
                "schema": {
                  "type": "string"
                },
                "description": "The ID of the delivery to retrieve tracking logs for."
              }
            ],
            "responses": {
              "200": {
                "description": "Tracking logs retrieved successfully.",
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/TrackingLog"
                      }
                    }
                  }
                }
              },
              "400": {
                "description": "Bad Request - Delivery ID is required or invalid."
              },
              "403": {
                "description": "Forbidden - User is not authorized to view this tracking data."
              },
              "404": {
                "description": "Not Found - Delivery not found."
              },
              "500": {
                "description": "Internal Server Error"
              }
            }
          }
        },
        "/tracking/log-gps": {
          "post": {
            "summary": "Log a GPS coordinate for a delivery.",
            "tags": [
              "Tracking"
            ],
            "requestBody": {
              "required": true,
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "deliveryId": {
                        "type": "string",
                        "description": "The ID of the delivery to log GPS for."
                      },
                      "latitude": {
                        "type": "number",
                        "format": "float",
                        "description": "The latitude coordinate."
                      },
                      "longitude": {
                        "type": "number",
                        "format": "float",
                        "description": "The longitude coordinate."
                      }
                    },
                    "required": [
                      "deliveryId",
                      "latitude",
                      "longitude"
                    ]
                  }
                }
              }
            },
            "responses": {
              "201": {
                "description": "GPS coordinate logged successfully.",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/GpsLog"
                    }
                  }
                }
              },
              "400": {
                "description": "Bad Request - Delivery ID, latitude, or longitude is required or invalid."
              },
              "500": {
                "description": "Internal Server Error"
              }
            }
          }
        }
      },
      "components": {
        "schemas": {
          "Delivery": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "Unique identifier for the delivery."
              },
              "status": {
                "type": "string",
                "enum": [
                  "PENDING",
                  "IN_TRANSIT",
                  "DELIVERED",
                  "CANCELLED"
                ],
                "description": "Current status of the delivery."
              },
              "shipperId": {
                "type": "string",
                "description": "ID of the user who initiated the delivery."
              },
              "travelerId": {
                "type": "string",
                "nullable": true,
                "description": "ID of the traveler assigned to the delivery, if any."
              },
              "createdAt": {
                "type": "string",
                "format": "date-time",
                "description": "Timestamp when the delivery was created."
              },
              "updatedAt": {
                "type": "string",
                "format": "date-time",
                "description": "Timestamp when the delivery was last updated."
              }
            },
            "required": [
              "id",
              "status",
              "shipperId",
              "createdAt",
              "updatedAt"
            ]
          },
          "TrackingLog": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "Unique identifier for the tracking log entry."
              },
              "deliveryId": {
                "type": "string",
                "description": "The ID of the delivery this log belongs to."
              },
              "userId": {
                "type": "string",
                "description": "The ID of the user who performed the action or whose location is logged."
              },
              "logType": {
                "type": "string",
                "enum": [
                  "START_TRACKING",
                  "STOP_TRACKING",
                  "GPS_UPDATE",
                  "CUSTOM_EVENT"
                ],
                "description": "Type of tracking event."
              },
              "latitude": {
                "type": "number",
                "format": "float",
                "nullable": true,
                "description": "Latitude coordinate, if applicable."
              },
              "longitude": {
                "type": "number",
                "format": "float",
                "nullable": true,
                "description": "Longitude coordinate, if applicable."
              },
              "timestamp": {
                "type": "string",
                "format": "date-time",
                "description": "Timestamp when the log entry was created."
              },
              "notes": {
                "type": "string",
                "nullable": true,
                "description": "Additional notes for the log entry."
              }
            },
            "required": [
              "id",
              "deliveryId",
              "userId",
              "logType",
              "timestamp"
            ]
          },
          "GpsLog": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "Unique identifier for the GPS log entry."
              },
              "deliveryId": {
                "type": "string",
                "description": "The ID of the delivery this GPS log belongs to."
              },
              "userId": {
                "type": "string",
                "description": "The ID of the traveler who logged the GPS coordinate."
              },
              "latitude": {
                "type": "number",
                "format": "float",
                "description": "The logged latitude coordinate."
              },
              "longitude": {
                "type": "number",
                "format": "float",
                "description": "The logged longitude coordinate."
              },
              "timestamp": {
                "type": "string",
                "format": "date-time",
                "description": "Timestamp when the GPS coordinate was logged."
              }
            },
            "required": [
              "id",
              "deliveryId",
              "userId",
              "latitude",
              "longitude",
              "timestamp"
            ]
          }
        }
      }
    },
    {
      "paths": {
        "/chat/history": {
          "get": {
            "summary": "Retrieve chat messages.",
            "tags": [
              "Chat"
            ],
            "parameters": [
              {
                "name": "deliveryId",
                "in": "query",
                "schema": {
                  "type": "string",
                  "format": "ObjectId"
                },
                "description": "ID of the delivery to get chat history for. Requires authorization as a participant of the delivery.",
                "required": false
              },
              {
                "name": "senderId",
                "in": "query",
                "schema": {
                  "type": "string",
                  "format": "ObjectId"
                },
                "description": "Sender's user ID for direct chat. Used in conjunction with receiverId.",
                "required": false
              },
              {
                "name": "receiverId",
                "in": "query",
                "schema": {
                  "type": "string",
                  "format": "ObjectId"
                },
                "description": "Receiver's user ID for direct chat. Used in conjunction with senderId.",
                "required": false
              }
            ],
            "requestBody": null,
            "responses": {
              "200": {
                "description": "Successfully retrieved chat messages.",
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ChatMessage"
                      }
                    }
                  }
                }
              },
              "400": {
                "description": "Bad Request - Invalid input parameters (e.g., invalid ID format, missing parameters).",
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "object",
                      "properties": {
                        "message": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              },
              "401": {
                "description": "Unauthorized - User is not authorized to view the requested chat history.",
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "object",
                      "properties": {
                        "message": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              },
              "404": {
                "description": "Not Found - Delivery associated with the deliveryId was not found.",
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "object",
                      "properties": {
                        "message": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              },
              "500": {
                "description": "Internal Server Error - An unexpected error occurred while fetching chat history.",
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "object",
                      "properties": {
                        "message": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "components": {
        "schemas": {
          "ChatMessage": {
            "type": "object",
            "properties": {
              "_id": {
                "type": "string",
                "format": "ObjectId",
                "description": "Unique identifier for the chat message."
              },
              "deliveryId": {
                "type": "string",
                "format": "ObjectId",
                "description": "ID of the delivery this message is related to."
              },
              "senderId": {
                "oneOf": [
                  {
                    "type": "string",
                    "format": "ObjectId"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "_id": {
                        "type": "string",
                        "format": "ObjectId"
                      },
                      "email": {
                        "type": "string"
                      },
                      "phone": {
                        "type": "string"
                      }
                    }
                  }
                ],
                "description": "The user who sent the message. Can be a string ObjectId or a populated user object."
              },
              "receiverId": {
                "oneOf": [
                  {
                    "type": "string",
                    "format": "ObjectId"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "_id": {
                        "type": "string",
                        "format": "ObjectId"
                      },
                      "email": {
                        "type": "string"
                      },
                      "phone": {
                        "type": "string"
                      }
                    }
                  }
                ],
                "description": "The user who received the message. Can be a string ObjectId or a populated user object."
              },
              "message": {
                "type": "string",
                "description": "The content of the chat message."
              },
              "timestamp": {
                "type": "string",
                "format": "date-time",
                "description": "The time the message was sent."
              }
            },
            "required": [
              "_id",
              "senderId",
              "receiverId",
              "message",
              "timestamp"
            ]
          }
        }
      }
    },
    {
      "summary": "This file defines the main router for the application, aggregating all other route modules. It sets up the base paths for authentication, matching, payments, tracking, and chat functionalities. It does not expose any direct endpoints itself but rather delegates to mounted sub-routers."
    },
    {
      "paths": {
        "/signup": {
          "post": {
            "summary": "User Registration",
            "tags": [
              "Auth"
            ],
            "requestBody": {
              "required": true,
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/SignupRequest"
                  }
                }
              }
            },
            "responses": {
              "201": {
                "description": "User created successfully",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/AuthResponse"
                    }
                  }
                }
              },
              "400": {
                "description": "Invalid input or validation error"
              },
              "409": {
                "description": "Email already in use"
              }
            }
          }
        },
        "/login": {
          "post": {
            "summary": "User Login",
            "tags": [
              "Auth"
            ],
            "requestBody": {
              "required": true,
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/LoginRequest"
                  }
                }
              }
            },
            "responses": {
              "200": {
                "description": "User logged in successfully",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/AuthResponse"
                    }
                  }
                }
              },
              "400": {
                "description": "Invalid input or validation error"
              },
              "401": {
                "description": "Invalid credentials"
              }
            }
          }
        },
        "/reset-password": {
          "post": {
            "summary": "Initiate Password Reset",
            "tags": [
              "Auth"
            ],
            "requestBody": {
              "required": true,
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ResetPasswordRequest"
                  }
                }
              }
            },
            "responses": {
              "200": {
                "description": "Password reset email sent successfully"
              },
              "400": {
                "description": "Invalid input or validation error"
              },
              "404": {
                "description": "User not found"
              }
            }
          }
        }
      },
      "components": {
        "schemas": {
          "SignupRequest": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "User's full name",
                "example": "John Doe"
              },
              "email": {
                "type": "string",
                "format": "email",
                "description": "User's email address",
                "example": "john.doe@example.com"
              },
              "password": {
                "type": "string",
                "format": "password",
                "description": "User's password",
                "example": "SecureP@ssword123"
              }
            },
            "required": [
              "name",
              "email",
              "password"
            ]
          },
          "LoginRequest": {
            "type": "object",
            "properties": {
              "email": {
                "type": "string",
                "format": "email",
                "description": "User's email address",
                "example": "john.doe@example.com"
              },
              "password": {
                "type": "string",
                "format": "password",
                "description": "User's password",
                "example": "SecureP@ssword123"
              }
            },
            "required": [
              "email",
              "password"
            ]
          },
          "ResetPasswordRequest": {
            "type": "object",
            "properties": {
              "email": {
                "type": "string",
                "format": "email",
                "description": "User's email address to reset password for",
                "example": "john.doe@example.com"
              }
            },
            "required": [
              "email"
            ]
          },
          "AuthResponse": {
            "type": "object",
            "properties": {
              "token": {
                "type": "string",
                "description": "JWT authentication token",
                "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
              },
              "user": {
                "$ref": "#/components/schemas/User"
              }
            },
            "required": [
              "token",
              "user"
            ]
          },
          "User": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the user",
                "example": "a1b2c3d4-e5f6-7890-1234-567890abcdef"
              },
              "name": {
                "type": "string",
                "description": "User's full name",
                "example": "John Doe"
              },
              "email": {
                "type": "string",
                "format": "email",
                "description": "User's email address",
                "example": "john.doe@example.com"
              },
              "createdAt": {
                "type": "string",
                "format": "date-time",
                "description": "Timestamp when the user was created",
                "example": "2023-10-27T10:00:00Z"
              },
              "updatedAt": {
                "type": "string",
                "format": "date-time",
                "description": "Timestamp when the user was last updated",
                "example": "2023-10-27T10:00:00Z"
              }
            },
            "required": [
              "id",
              "name",
              "email",
              "createdAt",
              "updatedAt"
            ]
          }
        }
      }
    },
    {
      "paths": {
        "/match/my": {
          "get": {
            "summary": "Get matches for the authenticated user",
            "tags": [
              "Match"
            ],
            "parameters": [],
            "responses": {
              "200": {
                "description": "Successful retrieval of matches",
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Match"
                      }
                    }
                  }
                }
              },
              "401": {
                "description": "Unauthorized - Authentication failed"
              },
              "403": {
                "description": "Forbidden - User role not authorized"
              }
            },
            "security": [
              {
                "bearerAuth": []
              }
            ]
          }
        },
        "/match/find": {
          "post": {
            "summary": "Find potential matches for a shipper",
            "tags": [
              "Match"
            ],
            "requestBody": {
              "required": true,
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/FindMatchesRequest"
                  }
                }
              }
            },
            "responses": {
              "200": {
                "description": "Successful retrieval of potential matches",
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/PotentialMatch"
                      }
                    }
                  }
                }
              },
              "400": {
                "description": "Bad Request - Validation failed"
              },
              "401": {
                "description": "Unauthorized - Authentication failed"
              },
              "403": {
                "description": "Forbidden - User role not authorized"
              }
            },
            "security": [
              {
                "bearerAuth": []
              }
            ]
          }
        },
        "/match/accept/{matchId}": {
          "post": {
            "summary": "Accept a match",
            "tags": [
              "Match"
            ],
            "parameters": [
              {
                "name": "matchId",
                "in": "path",
                "required": true,
                "schema": {
                  "type": "string",
                  "format": "uuid"
                },
                "description": "The ID of the match to accept"
              }
            ],
            "responses": {
              "200": {
                "description": "Match successfully accepted",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/Match"
                    }
                  }
                }
              },
              "400": {
                "description": "Bad Request - Invalid match ID or match already handled"
              },
              "401": {
                "description": "Unauthorized - Authentication failed"
              },
              "403": {
                "description": "Forbidden - User role not authorized"
              },
              "404": {
                "description": "Not Found - Match not found"
              }
            },
            "security": [
              {
                "bearerAuth": []
              }
            ]
          }
        },
        "/match/reject/{matchId}": {
          "post": {
            "summary": "Reject a match",
            "tags": [
              "Match"
            ],
            "parameters": [
              {
                "name": "matchId",
                "in": "path",
                "required": true,
                "schema": {
                  "type": "string",
                  "format": "uuid"
                },
                "description": "The ID of the match to reject"
              }
            ],
            "responses": {
              "200": {
                "description": "Match successfully rejected",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/Match"
                    }
                  }
                }
              },
              "400": {
                "description": "Bad Request - Invalid match ID or match already handled"
              },
              "401": {
                "description": "Unauthorized - Authentication failed"
              },
              "403": {
                "description": "Forbidden - User role not authorized"
              },
              "404": {
                "description": "Not Found - Match not found"
              }
            },
            "security": [
              {
                "bearerAuth": []
              }
            ]
          }
        }
      },
      "components": {
        "schemas": {
          "Match": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the match"
              },
              "shipperId": {
                "type": "string",
                "format": "uuid",
                "description": "ID of the shipper involved in the match"
              },
              "driverId": {
                "type": "string",
                "format": "uuid",
                "description": "ID of the driver involved in the match"
              },
              "status": {
                "type": "string",
                "enum": [
                  "pending",
                  "accepted",
                  "rejected"
                ],
                "description": "Current status of the match"
              },
              "createdAt": {
                "type": "string",
                "format": "date-time",
                "description": "Timestamp when the match was created"
              },
              "updatedAt": {
                "type": "string",
                "format": "date-time",
                "description": "Timestamp when the match was last updated"
              }
            },
            "required": [
              "id",
              "shipperId",
              "driverId",
              "status"
            ]
          },
          "FindMatchesRequest": {
            "type": "object",
            "properties": {
              "pickupLocation": {
                "type": "object",
                "properties": {
                  "lat": {
                    "type": "number",
                    "format": "float",
                    "description": "Latitude of the pickup location"
                  },
                  "lng": {
                    "type": "number",
                    "format": "float",
                    "description": "Longitude of the pickup location"
                  }
                },
                "required": [
                  "lat",
                  "lng"
                ],
                "description": "Pickup location coordinates"
              },
              "dropoffLocation": {
                "type": "object",
                "properties": {
                  "lat": {
                    "type": "number",
                    "format": "float",
                    "description": "Latitude of the dropoff location"
                  },
                  "lng": {
                    "type": "number",
                    "format": "float",
                    "description": "Longitude of the dropoff location"
                  }
                },
                "required": [
                  "lat",
                  "lng"
                ],
                "description": "Dropoff location coordinates"
              },
              "weight": {
                "type": "number",
                "description": "Weight of the cargo in kilograms"
              },
              "dimensions": {
                "type": "object",
                "properties": {
                  "length": {
                    "type": "number",
                    "description": "Length of the cargo in meters"
                  },
                  "width": {
                    "type": "number",
                    "description": "Width of the cargo in meters"
                  },
                  "height": {
                    "type": "number",
                    "description": "Height of the cargo in meters"
                  }
                },
                "required": [
                  "length",
                  "width",
                  "height"
                ],
                "description": "Dimensions of the cargo"
              }
            },
            "required": [
              "pickupLocation",
              "dropoffLocation",
              "weight",
              "dimensions"
            ]
          },
          "PotentialMatch": {
            "type": "object",
            "properties": {
              "driverId": {
                "type": "string",
                "format": "uuid",
                "description": "ID of the potential driver"
              },
              "driverName": {
                "type": "string",
                "description": "Name of the potential driver"
              },
              "distance": {
                "type": "number",
                "format": "float",
                "description": "Distance from the pickup location to the driver's current location"
              },
              "rating": {
                "type": "number",
                "format": "float",
                "description": "Average rating of the driver"
              }
            },
            "required": [
              "driverId",
              "driverName",
              "distance",
              "rating"
            ]
          }
        }
      }
    },
    {
      "paths": {
        "/tracking/start": {
          "post": {
            "summary": "Start tracking a delivery",
            "tags": [
              "Tracking"
            ],
            "security": [
              {
                "bearerAuth": []
              }
            ],
            "requestBody": {
              "description": "Payload to start tracking a delivery",
              "required": true,
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/StartTrackingPayload"
                  }
                }
              }
            },
            "responses": {
              "200": {
                "description": "Tracking started successfully",
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "object",
                      "properties": {
                        "message": {
                          "type": "string",
                          "example": "Tracking started successfully"
                        },
                        "trackingId": {
                          "type": "string",
                          "example": "tk_abcdef123456"
                        }
                      }
                    }
                  }
                }
              },
              "400": {
                "description": "Bad Request",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/ErrorResponse"
                    }
                  }
                }
              },
              "401": {
                "description": "Unauthorized",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/ErrorResponse"
                    }
                  }
                }
              },
              "403": {
                "description": "Forbidden",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/ErrorResponse"
                    }
                  }
                }
              },
              "500": {
                "description": "Internal Server Error",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/ErrorResponse"
                    }
                  }
                }
              }
            }
          }
        },
        "/tracking/stop": {
          "post": {
            "summary": "Stop tracking a delivery",
            "tags": [
              "Tracking"
            ],
            "security": [
              {
                "bearerAuth": []
              }
            ],
            "requestBody": {
              "description": "Payload to stop tracking a delivery",
              "required": true,
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/StopTrackingPayload"
                  }
                }
              }
            },
            "responses": {
              "200": {
                "description": "Tracking stopped successfully",
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "object",
                      "properties": {
                        "message": {
                          "type": "string",
                          "example": "Tracking stopped successfully"
                        }
                      }
                    }
                  }
                }
              },
              "400": {
                "description": "Bad Request",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/ErrorResponse"
                    }
                  }
                }
              },
              "401": {
                "description": "Unauthorized",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/ErrorResponse"
                    }
                  }
                }
              },
              "403": {
                "description": "Forbidden",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/ErrorResponse"
                    }
                  }
                }
              },
              "500": {
                "description": "Internal Server Error",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/ErrorResponse"
                    }
                  }
                }
              }
            }
          }
        },
        "/tracking/{deliveryId}": {
          "get": {
            "summary": "Get tracking information for a delivery",
            "tags": [
              "Tracking"
            ],
            "security": [
              {
                "bearerAuth": []
              }
            ],
            "parameters": [
              {
                "name": "deliveryId",
                "in": "path",
                "required": true,
                "schema": {
                  "type": "string",
                  "description": "The ID of the delivery to track"
                },
                "example": "del_abcdef123456"
              }
            ],
            "responses": {
              "200": {
                "description": "Tracking information retrieved successfully",
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "object",
                      "properties": {
                        "deliveryId": {
                          "type": "string",
                          "example": "del_abcdef123456"
                        },
                        "trackingId": {
                          "type": "string",
                          "example": "tk_abcdef123456"
                        },
                        "status": {
                          "type": "string",
                          "enum": [
                            "started",
                            "in_progress",
                            "delivered",
                            "cancelled"
                          ],
                          "example": "in_progress"
                        },
                        "currentLocation": {
                          "type": "object",
                          "properties": {
                            "latitude": {
                              "type": "number",
                              "format": "float",
                              "example": 34.052235
                            },
                            "longitude": {
                              "type": "number",
                              "format": "float",
                              "example": -118.243683
                            },
                            "timestamp": {
                              "type": "string",
                              "format": "date-time",
                              "example": "2023-10-27T10:00:00Z"
                            }
                          }
                        },
                        "history": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "latitude": {
                                "type": "number",
                                "format": "float",
                                "example": 34.052235
                              },
                              "longitude": {
                                "type": "number",
                                "format": "float",
                                "example": -118.243683
                              },
                              "timestamp": {
                                "type": "string",
                                "format": "date-time",
                                "example": "2023-10-27T10:00:00Z"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              },
              "400": {
                "description": "Bad Request",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/ErrorResponse"
                    }
                  }
                }
              },
              "401": {
                "description": "Unauthorized",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/ErrorResponse"
                    }
                  }
                }
              },
              "404": {
                "description": "Not Found",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/ErrorResponse"
                    }
                  }
                }
              },
              "500": {
                "description": "Internal Server Error",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/ErrorResponse"
                    }
                  }
                }
              }
            }
          }
        },
        "/tracking/log": {
          "post": {
            "summary": "Log GPS coordinates for a delivery",
            "tags": [
              "Tracking"
            ],
            "security": [
              {
                "bearerAuth": []
              }
            ],
            "requestBody": {
              "description": "Payload to log GPS coordinates",
              "required": true,
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/LogGPSPayload"
                  }
                }
              }
            },
            "responses": {
              "200": {
                "description": "GPS coordinates logged successfully",
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "object",
                      "properties": {
                        "message": {
                          "type": "string",
                          "example": "GPS coordinates logged successfully"
                        }
                      }
                    }
                  }
                }
              },
              "400": {
                "description": "Bad Request",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/ErrorResponse"
                    }
                  }
                }
              },
              "401": {
                "description": "Unauthorized",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/ErrorResponse"
                    }
                  }
                }
              },
              "403": {
                "description": "Forbidden",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/ErrorResponse"
                    }
                  }
                }
              },
              "500": {
                "description": "Internal Server Error",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/ErrorResponse"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "components": {
        "schemas": {
          "StartTrackingPayload": {
            "type": "object",
            "properties": {
              "deliveryId": {
                "type": "string",
                "description": "The ID of the delivery to start tracking",
                "example": "del_abcdef123456"
              }
            },
            "required": [
              "deliveryId"
            ]
          },
          "StopTrackingPayload": {
            "type": "object",
            "properties": {
              "deliveryId": {
                "type": "string",
                "description": "The ID of the delivery to stop tracking",
                "example": "del_abcdef123456"
              }
            },
            "required": [
              "deliveryId"
            ]
          },
          "LogGPSPayload": {
            "type": "object",
            "properties": {
              "deliveryId": {
                "type": "string",
                "description": "The ID of the delivery for which to log GPS coordinates",
                "example": "del_abcdef123456"
              },
              "latitude": {
                "type": "number",
                "format": "float",
                "description": "The latitude coordinate",
                "example": 34.052235
              },
              "longitude": {
                "type": "number",
                "format": "float",
                "description": "The longitude coordinate",
                "example": -118.243683
              }
            },
            "required": [
              "deliveryId",
              "latitude",
              "longitude"
            ]
          },
          "ErrorResponse": {
            "type": "object",
            "properties": {
              "message": {
                "type": "string",
                "description": "A description of the error",
                "example": "Invalid input provided"
              },
              "details": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Specific details about the error",
                "example": [
                  "deliveryId is a required field"
                ]
              }
            }
          }
        }
      }
    },
    {
      "paths": {
        "/escrow": {
          "post": {
            "summary": "Create an escrow payment",
            "tags": [
              "Payments"
            ],
            "security": [
              {
                "bearerAuth": []
              }
            ],
            "requestBody": {
              "required": true,
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CreateEscrowRequest"
                  }
                }
              }
            },
            "responses": {
              "201": {
                "description": "Escrow payment created successfully",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/Escrow"
                    }
                  }
                }
              },
              "400": {
                "description": "Bad Request - Invalid input or missing fields"
              },
              "401": {
                "description": "Unauthorized - Authentication failed"
              },
              "403": {
                "description": "Forbidden - User does not have the required role (shipper)"
              },
              "500": {
                "description": "Internal Server Error"
              }
            }
          }
        },
        "/release": {
          "post": {
            "summary": "Release funds from escrow",
            "tags": [
              "Payments"
            ],
            "security": [
              {
                "bearerAuth": []
              }
            ],
            "requestBody": {
              "required": true,
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ReleaseFundsRequest"
                  }
                }
              }
            },
            "responses": {
              "200": {
                "description": "Funds released successfully",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/Transaction"
                    }
                  }
                }
              },
              "400": {
                "description": "Bad Request - Invalid input or missing fields"
              },
              "401": {
                "description": "Unauthorized - Authentication failed"
              },
              "403": {
                "description": "Forbidden - User does not have the required role (shipper)"
              },
              "404": {
                "description": "Not Found - Escrow not found"
              },
              "500": {
                "description": "Internal Server Error"
              }
            }
          }
        }
      },
      "components": {
        "schemas": {
          "CreateEscrowRequest": {
            "type": "object",
            "properties": {
              "amount": {
                "type": "number",
                "format": "float",
                "description": "The amount to be held in escrow."
              },
              "orderId": {
                "type": "string",
                "description": "The ID of the order associated with this escrow."
              },
              "recipientId": {
                "type": "string",
                "description": "The ID of the recipient of the funds."
              }
            },
            "required": [
              "amount",
              "orderId",
              "recipientId"
            ]
          },
          "Escrow": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "The unique identifier for the escrow."
              },
              "amount": {
                "type": "number",
                "format": "float",
                "description": "The amount held in escrow."
              },
              "orderId": {
                "type": "string",
                "description": "The ID of the order associated with this escrow."
              },
              "recipientId": {
                "type": "string",
                "description": "The ID of the recipient of the funds."
              },
              "status": {
                "type": "string",
                "enum": [
                  "PENDING",
                  "RELEASED",
                  "CANCELLED"
                ],
                "description": "The current status of the escrow."
              },
              "createdAt": {
                "type": "string",
                "format": "date-time",
                "description": "The timestamp when the escrow was created."
              },
              "updatedAt": {
                "type": "string",
                "format": "date-time",
                "description": "The timestamp when the escrow was last updated."
              }
            },
            "required": [
              "id",
              "amount",
              "orderId",
              "recipientId",
              "status",
              "createdAt",
              "updatedAt"
            ]
          },
          "ReleaseFundsRequest": {
            "type": "object",
            "properties": {
              "escrowId": {
                "type": "string",
                "description": "The ID of the escrow to release funds from."
              }
            },
            "required": [
              "escrowId"
            ]
          },
          "Transaction": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "The unique identifier for the transaction."
              },
              "escrowId": {
                "type": "string",
                "description": "The ID of the escrow this transaction is related to."
              },
              "amount": {
                "type": "number",
                "format": "float",
                "description": "The amount of the transaction."
              },
              "type": {
                "type": "string",
                "enum": [
                  "DEPOSIT",
                  "RELEASE"
                ],
                "description": "The type of transaction."
              },
              "status": {
                "type": "string",
                "enum": [
                  "SUCCESS",
                  "FAILED"
                ],
                "description": "The status of the transaction."
              },
              "createdAt": {
                "type": "string",
                "format": "date-time",
                "description": "The timestamp when the transaction was created."
              }
            },
            "required": [
              "id",
              "escrowId",
              "amount",
              "type",
              "status",
              "createdAt"
            ]
          }
        }
      }
    },
    {
      "paths": {
        "/history": {
          "get": {
            "summary": "Retrieve chat history",
            "tags": [
              "Chat"
            ],
            "description": "Fetches the chat history for the authenticated user. Real-time chat functionality is handled via websockets.",
            "security": [
              {
                "bearerAuth": []
              }
            ],
            "responses": {
              "200": {
                "description": "Chat history retrieved successfully",
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "description": "Unique identifier for the chat message."
                          },
                          "senderId": {
                            "type": "string",
                            "description": "Identifier of the user who sent the message."
                          },
                          "receiverId": {
                            "type": "string",
                            "description": "Identifier of the user who received the message."
                          },
                          "content": {
                            "type": "string",
                            "description": "The content of the chat message."
                          },
                          "timestamp": {
                            "type": "string",
                            "format": "date-time",
                            "description": "The date and time when the message was sent."
                          }
                        },
                        "required": [
                          "id",
                          "senderId",
                          "receiverId",
                          "content",
                          "timestamp"
                        ]
                      }
                    }
                  }
                }
              },
              "401": {
                "description": "Unauthorized - Authentication token is missing or invalid."
              },
              "500": {
                "description": "Internal Server Error - Failed to retrieve chat history."
              }
            }
          }
        }
      }
    },
    {
      "summary": "Authentication and Authorization Middleware",
      "description": "This middleware provides functionality to authenticate users via JWT and authorize access based on roles.",
      "components": {
        "schemas": {
          "AuthenticatedUser": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "format": "uuid",
                "description": "The unique identifier of the authenticated user."
              },
              "role": {
                "type": "string",
                "description": "The role of the authenticated user."
              }
            },
            "required": [
              "id",
              "role"
            ]
          }
        }
      }
    },
    {
      "summary": "Express.js error handling middleware. This middleware intercepts errors, categorizes them based on environment (development or production) and error type (e.g., database errors, JWT errors, validation errors), and sends appropriate responses to the client. In development, it sends detailed error information. In production, it sends user-friendly messages for operational errors and generic messages for programming errors, while logging the detailed error for debugging."
    },
    {
      "summary": "This file exports a validation middleware factory function that uses Joi for schema validation. It dynamically applies validation to request parameters, query strings, or request bodies based on the provided schema. If validation fails, it throws an AppError with a BAD_REQUEST status. Otherwise, it assigns the validated values to the request object and proceeds to the next middleware."
    },
    {
      "summary": "Represents a custom error class for application-specific errors, including HTTP status codes and operational flags."
    },
    {
      "summary": "Utility functions for password hashing and comparison using bcrypt."
    },
    {
      "summary": "Utility functions for JSON Web Token (JWT) generation and verification."
    },
    {
      "summary": "A simple logger utility. In a production app, consider tools like Winston or Pino."
    },
    {
      "summary": "Wrapper for async route handlers to catch errors and pass them to Express error middleware. This utility is not directly exposed as an API endpoint and does not represent a data model."
    },
    {
      "components": {
        "schemas": {
          "SignupRequest": {
            "type": "object",
            "properties": {
              "email": {
                "type": "string",
                "format": "email",
                "description": "User's email address."
              },
              "phone": {
                "type": "string",
                "pattern": "^\\+?[1-9]\\d{1,14}$",
                "description": "User's phone number in E.164 format (e.g., +1234567890)."
              },
              "password": {
                "type": "string",
                "minLength": 8,
                "maxLength": 30,
                "description": "User's password (8-30 characters)."
              },
              "role": {
                "type": "string",
                "enum": [
                  "shipper",
                  "traveler"
                ],
                "default": "shipper",
                "description": "The role of the user."
              }
            },
            "required": [
              "email",
              "phone",
              "password"
            ]
          },
          "LoginRequest": {
            "type": "object",
            "properties": {
              "email": {
                "type": "string",
                "format": "email",
                "description": "User's email address."
              },
              "password": {
                "type": "string",
                "description": "User's password."
              }
            },
            "required": [
              "email",
              "password"
            ]
          },
          "ResetPasswordRequest": {
            "type": "object",
            "properties": {
              "email": {
                "type": "string",
                "format": "email",
                "description": "User's email address."
              },
              "newPassword": {
                "type": "string",
                "minLength": 8,
                "maxLength": 30,
                "description": "The new password for the user (8-30 characters)."
              }
            },
            "required": [
              "email",
              "newPassword"
            ]
          }
        }
      }
    }
  ]
}